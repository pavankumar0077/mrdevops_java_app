@Library("my-shared-library") _

pipeline{
    agent any

    parameters {
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'DockerRepo', description: "docker credentails repo", defaultValue: "pavan0077")
        string(name: 'ImageName', description: "name of the docker build", defaultValue: "javaapp")
        string(name: 'ImageTag', description: "name of the docker build", defaultValue: "v1")
        string(name: 'AppName', description: "name of the application", defaultValue: "springboot")
    }

    stages{

        stage('Git Checkout'){
        when { expression { params.action == 'create'}}
            steps{
                script{
                    gitCheckout
                        branch: "main"
                        url: "https://github.com/pavankumar0077/mrdevops_java_app.git"
                }
            }
        }

        stage('Unit Test Maven'){
        when {expression {params.action == 'create'}}
            steps{
                script{
                    mvnTest()
            }
        }

        }

        stage('Maven Integration Test'){
        when{expression {params.action == 'create'}}
            steps{
                script{
                    mvnIntegrationTest()
                }
            }
        }

        stage('Static Code Analysis: Sonar'){
        when{expression {params.action == 'create'}}    
            steps{
                script{
                    def SonarQubecredentialsId = 'sonar-credentials'
                    staticCodeAnalysis(SonarQubecredentialsId)
                }
            }
        }

        
        stage('Quality Gate Status: Sonar'){
        when{expression {params.action == 'create'}}    
            steps{
                script{
                    def SonarQubecredentialsId = 'sonar-credentials'
                    QualityGateStatus(SonarQubecredentialsId)
                }
            }
        }

        stage('Maven Build'){
        when{expression {params.action == 'create'}}
            steps{
                script{
                    mvnBuild()
                }
            }
        }

        stage('Docker Image Build'){
        when{expression {params.action == 'create'}}
            environment {
            DOCKER_IMAGE = "${DockerRepo}/${ImageName}:${BUILD_NUMBER}"
        }
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker build -t ${DockerRepo}/${ImageName}:${ImageTag} ."
                    }
                }
            }

        }

        stage('Docker Image Scan: TRIVY'){
        when{expression {params.action == 'create'}}
            steps{
                script{
                    dockerImageScan("${params.DockerRepo}","${params.ImageName}","${params.ImageTag}")
                }
            }
        }

        stage('Docker Image Push'){
        when{expression {params.action == 'create'}}
            environment {
            DOCKER_IMAGE = "${DockerRepo}/${ImageName}:${BUILD_NUMBER}"
        }
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker push ${DockerRepo}/${ImageName}:${ImageTag}"
                    }
                }
            }

        }    

        stage('Docker Image CleanUp'){
        when{expression {params.action == 'create'}}
            environment {
            DOCKER_IMAGE = "${DockerRepo}/${ImageName}:${BUILD_NUMBER}"
        }
            steps{
                script{
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker rmi ${DockerRepo}/${ImageName}:${ImageTag}"
                    }
                }
            }

        }

        stage('Kubernetes Deployment') {
        when { expression { params.action == 'create' } }
            steps {
                script {
                    // Set the Kubernetes cluster context
                    sh "kubectl config set-context my-cluster --namespace=default --server=http://192.168.138.105"
                    
                    // Authenticate to the cluster (replace 'kubeconfig-path' and 'cluster-credentials' with your actual credentials)
                    sh "kubectl --context=my-cluster --kubeconfig=kubeconfig-path auth activate-service-account my-service-account --token=my-service-account-token"
                    
                    // Apply your deployment YAML
                    sh "kubectl --context=my-cluster apply -f deployment.yaml"
                    
                    // Apply your service YAML
                    sh "kubectl --context=my-cluster apply -f service.yaml"
                    
                    // Wait for the deployment to complete (adjust the timeout as needed)
                    sh "kubectl --context=my-cluster rollout status deployment/your-deployment-name -n default --timeout=300s"
                }
    }
}

        
          
    }
}